<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Блог Анатолия Гладкого</title>
    <link>http://beta.agladky.ru/blog/</link>
    <description>Recent content in Blog on Блог Анатолия Гладкого</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-RU</language>
    <lastBuildDate>Wed, 06 Jan 2016 13:10:07 +0300</lastBuildDate>
    <atom:link href="http://beta.agladky.ru/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Шпаргалка с основными командами для Git</title>
      <link>http://beta.agladky.ru/blog/git-cheat-sheet/</link>
      <pubDate>Wed, 06 Jan 2016 13:10:07 +0300</pubDate>
      
      <guid>http://beta.agladky.ru/blog/git-cheat-sheet/</guid>
      <description>

&lt;h3 id=&#34;конфигурация&#34;&gt;Конфигурация&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git config --global user.name &amp;quot;[name]&amp;quot;&lt;/code&gt; — установить имя, которое будет прикрепляться к коммиту.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global user.email &amp;quot;[email address]&amp;quot;&lt;/code&gt; — установить email, который будет прикрепляться к коммиту.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global color.ui auto&lt;/code&gt; — включить полезную подсветку командной строки.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global push.default current&lt;/code&gt; — обновлять удаленную ветку с таким же именем, что и локальная, при пуше изменений (если не указано иного).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global core.editor [editor]&lt;/code&gt; — установить редактор для редактирования сообщений коммита.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global diff.tool [tool]&lt;/code&gt; — установить программу для разрешения конфликтов при слиянии.&lt;/p&gt;

&lt;h3 id=&#34;создание-репозиториев&#34;&gt;Создание репозиториев&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git init [project-name]&lt;/code&gt; — создать новый локальный репозиторий с заданным именем.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone [url]&lt;/code&gt; — загрузить проект и его полную историю изменений.&lt;/p&gt;

&lt;h3 id=&#34;работа-с-изменениями&#34;&gt;Работа с изменениями&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; — полный список изменений файлов, ожидающих коммита.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git status -s&lt;/code&gt; — краткий вид изменений.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt; — показать изменения в файлах, которые еще не были добавлены в индекс коммита (staged).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add [file]&lt;/code&gt; — сделать указанный файл готовым для коммита.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt; — сделать все измененные файлы готовыми для коммита.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add &#39;*.txt&#39;&lt;/code&gt; — добавить только файлы, соответствующие указанному выражению.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add --patch filename&lt;/code&gt; — позволяет выбрать какие изменения из файла добавятся в коммит.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git diff --staged&lt;/code&gt; — показать что было добавленно в индекс с помощью &lt;code&gt;git add&lt;/code&gt;, но еще не было закоммиченно.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git diff HEAD&lt;/code&gt; — показать что изменилось с последнего коммита.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git diff HEAD^&lt;/code&gt; — показать что изменилось с предпоследнего коммита.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git diff [branch]&lt;/code&gt; — сравнить текущую ветку с заданной.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git difftool -d&lt;/code&gt; — то же самое, что и &lt;code&gt;diff&lt;/code&gt;, но показывает изменения в заданной difftool.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git difftool -d master..&lt;/code&gt; — показать изменения сделанные в текущей ветке.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git diff --stat&lt;/code&gt; — показать статистику какие файлы были изменены и как.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset [file]&lt;/code&gt; — убрать файлы из индекса коммита (изменения не теряются).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; — записать изменения в репозиторий. для написания сообщения откроется назначенный редактор.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m &amp;quot;[descriptive message]&amp;quot;&lt;/code&gt; — записать изменения с заданным сообщением.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit --amend&lt;/code&gt; — добавить изменения к последнему коммиту.&lt;/p&gt;

&lt;h3 id=&#34;работа-с-ветками&#34;&gt;Работа с ветками&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt; — список всех локальных веток в текущей директории.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch [branch-name]&lt;/code&gt; — создать новую ветку.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout [branch-name]&lt;/code&gt; — переключиться на указанную ветку и обновить рабочую директорию.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;name&amp;gt; &amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/code&gt; — переключиться на удаленную ветку.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout [filename]&lt;/code&gt; — вернуть файл в первоначальное состояние если он еще не был добавлен в индекс коммита.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge [branch]&lt;/code&gt; — соединить изменения в текущей ветке с изменениями из заданной.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge --no-ff [branch]&lt;/code&gt; — соединить ветки без режима &amp;ldquo;&lt;a href=&#34;http://zencoder.ru/git/fast-forward-git&#34;&gt;fast forwarding&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -a&lt;/code&gt; — посмотреть полный список локальных и удаленных веток.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -d [branch]&lt;/code&gt; — удалить заданную ветку.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -D [branch]&lt;/code&gt; — принудительно удалить заданную ветку, игнорируя ошибки.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -m &amp;lt;oldname&amp;gt; &amp;lt;newname&amp;gt;&lt;/code&gt; — переименовать ветку.&lt;/p&gt;

&lt;h3 id=&#34;работа-с-файлами&#34;&gt;Работа с файлами&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git rm [file]&lt;/code&gt; — удалить файл из рабочей директории и добавить в индекс информацию о удалении.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm --cached [file]&lt;/code&gt; — удалить файл из репозитория, но сохранить его локально.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git mv [file-original] [file-renamed]&lt;/code&gt; — изменить имя файла и добавить в индекс коммита.&lt;/p&gt;

&lt;h3 id=&#34;отслеживание-файлов&#34;&gt;Отслеживание файлов&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt; — текстовый файл, в котором задаются правила для исключения файлов из репозитория. Например:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;temp-*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git ls-files --other --ignored --exclude-standard&lt;/code&gt; — список всех игнорируемых файлов.&lt;/p&gt;

&lt;h3 id=&#34;сохранение-фрагментов&#34;&gt;Сохранение фрагментов&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; — положить во временное хранилище все отслеживаемые файлы.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git stash pop&lt;/code&gt; — восстановить последние файлы, положенные во временное хранилище.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git stash list&lt;/code&gt; — список всех сохраненных изменений во временном хранилище.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git stash drop&lt;/code&gt; — удалить последние файлы, положенные во временное хранилище.&lt;/p&gt;

&lt;h3 id=&#34;просмотр-истории&#34;&gt;Просмотр истории&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; — список изменения текущей ветки.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --follow [file]&lt;/code&gt; — список изменения текущего файла, включая переименования.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --pretty=format:&amp;quot;%h %s&amp;quot; --graph&lt;/code&gt; — изменение вида отображения истории изменений.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --author=&#39;Name&#39; --after={1.week.ago} --pretty=oneline --abbrev-commit&lt;/code&gt; — посмотреть над чем работал заданный пользователь последнюю неделю.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --no-merges master..&lt;/code&gt; — посмотреть историю изменений только для текущей ветке.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git diff [file-branch]..[second-branch]&lt;/code&gt; — посмотреть различия между двумя заданными ветками.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git show [commit]&lt;/code&gt; — показать метадату и изменения в заданном коммите.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git show [branch]:[file]&lt;/code&gt; — посмотреть на файл в другой ветке, не переключаясь на неё.&lt;/p&gt;

&lt;h3 id=&#34;отмена-коммитов&#34;&gt;Отмена коммитов&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt; — убрать изменения из индекса коммита, сами изменения останутся.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset [commit/tag]&lt;/code&gt; — отменить все коммиты после указанного коммита, изменения будут сохранены локально.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset --hard [commit]&lt;/code&gt; — принудительно вернутся в указанному коммиту, не сохраняя историю и изменения.&lt;/p&gt;

&lt;h3 id=&#34;синхронизация-изменений&#34;&gt;Синхронизация изменений&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git fetch [bookmark]&lt;/code&gt; — загрузить всю историю с заданного удаленного репозитория.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge [bookmark]/[branch]&lt;/code&gt; — слить изменения локальной ветки и заданной удаленной.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt; — запушить текущую ветку в удаленную ветку.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push [remote] [branch]&lt;/code&gt; — запушить ветку в указанный репозиторий и удаленную ветку.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push [bookmark] :[branch]&lt;/code&gt; — в удаленном репозитории удалить заданную ветку.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push -u origin master&lt;/code&gt; — если удаленная ветка не установлена как отслеживаемая, то сделать ее такой.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; — загрузить историю и изменения удаленной ветки и произвести слияние с текущей веткой.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull [remote][branch]&lt;/code&gt; — указать конкретную удаленную ветку для слияния.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote&lt;/code&gt; — посмотреть список доступных удаленных репозиториев.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt; — посмотреть детальный список доступных удаленных репозиториев.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add [remote][url]&lt;/code&gt; — добавить новый удаленный репозиторий.&lt;/p&gt;

&lt;h3 id=&#34;полезные-ссылки&#34;&gt;Полезные ссылки&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;19 советов по повседневной работе с Git. &lt;a href=&#34;http://www.alexkras.com/19-git-tips-for-everyday-use/&#34;&gt;оригинал&lt;/a&gt;. &lt;a href=&#34;http://habrahabr.ru/company/mailru/blog/267595/&#34;&gt;перевод&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Книга &amp;ldquo;&lt;a href=&#34;http://git-scm.com/book/ru/v1&#34;&gt;Pro Git&lt;/a&gt;&amp;rdquo;. Издание первое, на русском.&lt;/li&gt;
&lt;li&gt;Книга &amp;ldquo;&lt;a href=&#34;http://git-scm.com/book/en/v2&#34;&gt;Pro Git&lt;/a&gt;&amp;rdquo;. Издание второе, на английском.&lt;/li&gt;
&lt;li&gt;Git Rebase: &lt;a href=&#34;http://habrahabr.ru/post/161009/&#34;&gt;руководство по использованию&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Почему стоит использовать zsh вместо bash</title>
      <link>http://beta.agladky.ru/blog/why-zsh-is-better-than-bash/</link>
      <pubDate>Thu, 26 Nov 2015 13:10:07 +0300</pubDate>
      
      <guid>http://beta.agladky.ru/blog/why-zsh-is-better-than-bash/</guid>
      <description>

&lt;p&gt;Zsh не такая уж и новая оболочка, первая версия появилась еще в 1990 году. С историей и основными особенностями можно познакомится в &lt;a href=&#34;https://ru.wikipedia.org/wiki/Zsh&#34;&gt;русской&lt;/a&gt; или &lt;a href=&#34;https://en.wikipedia.org/wiki/Z_shell&#34;&gt;английской&lt;/a&gt; википедии.&lt;/p&gt;

&lt;p&gt;Давайте рассмотрим особенности zsh, которые покажут чем эта оболочка лучше bash. И почему стоит хотя бы попробовать использовать её в повседневной жизни.&lt;/p&gt;

&lt;h3 id=&#34;автодополнение-для-cd&#34;&gt;Автодополнение для cd&lt;/h3&gt;

&lt;p&gt;Наберем в баш &lt;code&gt;cd&lt;/code&gt; и нажмем таб.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-8iOm_Ix2cxE/VlawDdhnxPI/AAAAAAAAAjo/fybejZjCiJs/s640-Ic42/Screenshot%2525202015-11-23%25252009.44.27.png&#34; alt=&#34;bash cd tab first&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Еще раз.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-9EtosbNV72U/VlawDQ65VCI/AAAAAAAAAkE/hQ1XsEusWbA/s640-Ic42/Screenshot%2525202015-11-23%25252009.44.47.png&#34; alt=&#34;bash cd tab second&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Каждый раз будет выводится только список файлов в текущей директории. Так продолжится пока не ввести первые буквы искомого файла, тогда отобразиться отфильтрованный список. И, только если введенные данные позволяют точно определить значение, то подставится полное имя файла или папки.&lt;/p&gt;

&lt;p&gt;Теперь наберем &lt;code&gt;cd&lt;/code&gt; в zsh и нажмем таб.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-BSBLwCuwbGw/VlawDaG8oEI/AAAAAAAAAjw/dB7bM5n6iqg/s640-Ic42/Screenshot%2525202015-11-23%25252009.46.15.png&#34; alt=&#34;zsh cd tab first&#34; /&gt;&lt;/p&gt;

&lt;p&gt;В строку ввода подставилось первое значение из списка. Нажимаем таб еще раз.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-Dc119BYH764/VlawD4ymcII/AAAAAAAAAkI/V7EzDl0DuJA/s640-Ic42/Screenshot%2525202015-11-23%25252009.47.34.png&#34; alt=&#34;zsh cd tab second&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Подставилось второе значение из списка! Удобно.&lt;/p&gt;

&lt;h3 id=&#34;автодополнение-для-команд-на-примере-git&#34;&gt;Автодополнение для команд на примере git&lt;/h3&gt;

&lt;p&gt;Введем в баш &lt;code&gt;git&lt;/code&gt; и нажмем таб.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-2XI7N9lTfA4/VlawD66cYSI/AAAAAAAAAj4/3Pi57w0iQbA/s640-Ic42/Screenshot%2525202015-11-26%25252009.32.26.png&#34; alt=&#34;bash git tab&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Никакой помощи не появилось. Только отображаются файлы данной директории.&lt;/p&gt;

&lt;p&gt;Проделаем ту же операцию в zsh.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-8dn01qWVJd4/VlawEI4aHTI/AAAAAAAAAjk/i2wF_bGGo7c/s640-Ic42/Screenshot%2525202015-11-26%25252009.33.24.png&#34; alt=&#34;zsh git tab&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Отобразился список команд с описанием. Это гораздо информативнее.&lt;/p&gt;

&lt;p&gt;Да, установив пакет bash-completion подобное поведение появится и в баше. Но выводить информацию как в zsh не получится:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Не будет итерации по значениям, как в пункте про &lt;code&gt;cd&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Не будет справочной информации, только список значений.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;раскрытие-полного-пути&#34;&gt;Раскрытие полного пути&lt;/h3&gt;

&lt;p&gt;Zsh поддерживает раскрытие полного пути на основе неполных данных. Введем шаблон пути:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-JkUKjONlTM0/VlawEFd1zdI/AAAAAAAAAkM/cU-dPKShFg8/s640-Ic42/Screenshot%2525202015-11-26%25252009.59.58.png&#34; alt=&#34;zsh path expansion first&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Нажмем tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-dA_uysuc3-s/VlawEcceJZI/AAAAAAAAAkA/naoYDI9fJQc/s640-Ic42/Screenshot%2525202015-11-26%25252010.00.08.png&#34; alt=&#34;zsh path expansion second&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Путь до директории полностью раскрылся. Не пришлось вводить лишних символов.&lt;/p&gt;

&lt;p&gt;Но что, если заданному пути соответствует несколько путей? Введем &lt;code&gt;cd u/l/g&lt;/code&gt; и нажмем таб.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-RXcaxKd0UZc/VlawEQAE_II/AAAAAAAAAkQ/nePq8mG_mJc/s640-Ic42/Screenshot%2525202015-11-26%25252010.00.31.png&#34; alt=&#34;zsh path expansion third&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Путь раскрылся до возникновения неопределенности. Нажимаем таб еще раз, и перед нами предстанет выбор папки.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-YvpzsGE9ZiU/VlawEt6KbRI/AAAAAAAAAjs/8J7ogcuB5YU/s640-Ic42/Screenshot%2525202015-11-26%25252010.00.46.png&#34; alt=&#34;zsh path expansion third&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Выбираем табом нужную папку. Последующее нажатие таба раскроет задуманный путь до конца.&lt;/p&gt;

&lt;h3 id=&#34;замена-пути&#34;&gt;Замена пути&lt;/h3&gt;

&lt;p&gt;Zsh поддерживает замену части пути. Рассмотрим на примере. Введем &lt;code&gt;cd /usr/local/bin&lt;/code&gt;. Но подождите, я хотел &lt;code&gt;cd /usr/local/share&lt;/code&gt;! Не проблема, вводим команду &lt;code&gt;cd bin share&lt;/code&gt; и получаем заветный путь:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-P_Kx_CFBWx4/VlawEm_jwkI/AAAAAAAAAj8/F1bj2sVrwgk/s640-Ic42/Screenshot%2525202015-11-26%25252010.02.49.png&#34; alt=&#34;zsh path replacement first&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Возможно, это не самый убедительный пример. Того же эффекта можно достичь просто написав &lt;code&gt;cd ../share&lt;/code&gt;. Но рассмотрим следующий случай:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-_eKSxUA5xWc/VlawE9que7I/AAAAAAAAAkU/SuGQ0fm9awE/s640-Ic42/Screenshot%2525202015-11-26%25252010.05.16.png&#34; alt=&#34;zsh path replacement second&#34; /&gt;&lt;/p&gt;

&lt;p&gt;B баш тут бы пришлось изрядно постараться (&lt;code&gt;cd ../../../&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;псевдонимы&#34;&gt;Псевдонимы&lt;/h3&gt;

&lt;p&gt;Обычные псевдонимы задаются так:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;’ls —color&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;auto’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;В zsh существует еще 2 типа псевдонима.&lt;/p&gt;

&lt;p&gt;Первый — &lt;em&gt;глобальный (global)&lt;/em&gt;. Может вызываться в любом месте команды. Задается ключом &lt;code&gt;-g&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; -g &lt;span class=&#34;nv&#34;&gt;gp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;| grep -i&amp;#39;&lt;/span&gt;

$ ps ax gp &lt;span class=&#34;nv&#34;&gt;docker&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; ps ax &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -i docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;В примере, вместо написания &lt;code&gt;| grep -i&lt;/code&gt;, в середине выражения, использовался псевдоним &lt;code&gt;gp&lt;/code&gt;. Удобно.&lt;/p&gt;

&lt;p&gt;Второй тип — &lt;em&gt;суфиксный (suffix)&lt;/em&gt;. Указывает в каком приложении открывать файл, основываясь на расширении. Задается ключом &lt;code&gt;-s&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; -s &lt;span class=&#34;nv&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;less -MN&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; -s &lt;span class=&#34;nv&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;chromium&amp;#39;&lt;/span&gt;

$ development.log
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; less -MN development.log
$ index.html
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; chromium index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;правая-строка&#34;&gt;Правая строка&lt;/h3&gt;

&lt;p&gt;Zsh позволяет настроить правую строку приглашения. Туда можно выводить текущую дату, состояние ветки в git и многое другое. Иллюстрация из &lt;a href=&#34;https://git-scm.com/book/tr/v2/Git-in-Other-Environments-Git-in-Zsh&#34;&gt;книги Pro Git&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-m6u_sxiII2k/VlbDByw8w2I/AAAAAAAAAkw/E1PlhRAqQw0/s640-Ic42/zsh-prompt.png&#34; alt=&#34;zsh right prompt example&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;поиск-в-истории-по-подстроке&#34;&gt;Поиск в истории по подстроке&lt;/h3&gt;

&lt;p&gt;Одна из самых кайфовых вещей, которую позволяет делать zsh. (Включается плагином, history-substring-search в oh-my-zsh, о котором ниже).&lt;/p&gt;

&lt;p&gt;Например, вводим &lt;code&gt;git pu&lt;/code&gt; и нажимаем стрелку вверх.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-JcZi_xvm-gM/VlawE0ZiSVI/AAAAAAAAAj0/igudlxn0iDQ/s640-Ic42/Screenshot%2525202015-11-26%25252010.06.25.png&#34; alt=&#34;zsh-history-substring-search&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Получили последний запрос, который соответствует введенному шаблону. Дальнейшие нажатия будут выводить следующий результат. Удобно, что для поиска совершаются минимальные действия.&lt;/p&gt;

&lt;h3 id=&#34;oh-my-zsh&#34;&gt;oh-my-zsh&lt;/h3&gt;

&lt;p&gt;Фреймворк для легкой настройки и установки &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview&#34;&gt;плагинов&lt;/a&gt; и &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/wiki/Themes&#34;&gt;тем оформления&lt;/a&gt;. Содержит в себе уже более 200 плагинов. Проект доступен на &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Плагины которыми я пользуюсь:
* &lt;em&gt;git&lt;/em&gt; — добавляет много полезных &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git&#34;&gt;сокращений&lt;/a&gt; для команд гита.
* &lt;em&gt;colored-man-pages&lt;/em&gt; — добавляет подсветку на man страницы
* &lt;em&gt;command-not-found&lt;/em&gt; — подсказывает название команды, если она напечатана с ошибкой
* &lt;em&gt;bwana&lt;/em&gt; — позволяет открывать man страницы в браузере
* &lt;em&gt;sublime&lt;/em&gt; — псевдонимы для вызова sublime text
* &lt;em&gt;history&lt;/em&gt; — псевдонимы для истории команд и поиска по ним
* &lt;em&gt;history-substring-search&lt;/em&gt; — реализация поиска в истории по подстроке
* &lt;em&gt;docker&lt;/em&gt; — помощь для команд докера.&lt;/p&gt;

&lt;p&gt;Вид популярной темы для zsh:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;заключение&#34;&gt;Заключение&lt;/h3&gt;

&lt;p&gt;Я не сомневаюсь, что многое из написанного можно достигнуть с помощью различных плагинов и скриптов для баша. Но зачем если есть хорошее решение «из коробки». Которое работает, и работает очень хорошо.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C# Enum и Атрибут Flags</title>
      <link>http://beta.agladky.ru/blog/flags-enums-in-csharp/</link>
      <pubDate>Tue, 03 Nov 2015 13:10:07 +0300</pubDate>
      
      <guid>http://beta.agladky.ru/blog/flags-enums-in-csharp/</guid>
      <description>

&lt;p&gt;Возникают ситуации, когда переменная должна хранить несколько значений типа перечисления. Например, используемые области логирования: &lt;em&gt;Warning + Info&lt;/em&gt;, или сочетания цветов: &lt;em&gt;Red + Blue + Green&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Для хранения в переменной нескольких флагов, значениям енама присваиваются степени двойки:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;[Flags]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColors&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Red&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Blue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Значения &lt;em&gt;2, 4, 8&lt;/em&gt; используются для &lt;a href=&#34;https://ru.wikipedia.org/wiki/%D0%91%D0%B8%D1%82%D0%BE%D0%B2%D1%8B%D0%B5_%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8&#34;&gt;операторов смещения&lt;/a&gt;, таких как побитовое И (AND), ИЛИ (OR) и исключающее ИЛИ (XOR).&lt;/p&gt;

&lt;h3 id=&#34;операции-над-переменной&#34;&gt;Операции над переменной&lt;/h3&gt;

&lt;p&gt;Логическое ИЛИ (&lt;code&gt;|&lt;/code&gt;) применяется для помещения нескольких значений флагов в одну переменную:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AllowedColors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Red&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Логическое И (&lt;code&gt;&amp;amp;&lt;/code&gt;) помогает при нахождения значения флага:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AllowedColors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Yellow has been set...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AllowedColors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Green has been set...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Начиная с .Net 4 можно использовать сокращенную версию, без явного указания &lt;code&gt;&amp;amp;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AllowedColors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HasFlag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Yellow has been set...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Операция XOR (’^’) исключает значения из переменной:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AllowedColors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Red&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Удаляем значение используя оператор смещения XOR.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;myProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AllowedColors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AllowedColors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;My colors are {0}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AllowedColors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Output: My colors are Red, Blue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;атрибут-flags&#34;&gt;Атрибут Flags&lt;/h3&gt;

&lt;p&gt;Атрибут &lt;code&gt;[Flags]&lt;/code&gt; необязательный и используется для красивого вывода при вызове &lt;code&gt;.ToString()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Colors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Red&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Blue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;[Flags]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ColorsFlags&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Red&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Blue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;quot;5&amp;quot;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ColorsFlags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ColorsFlags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;quot;Yellow, Red&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Так же, атрибут &lt;code&gt;[Flags]&lt;/code&gt; не присваивает значениям степень двойки. Если не проставить вручную, то значения инициализируются как в обычном енаме.&lt;/p&gt;

&lt;p&gt;Неправильное объявление:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;[Flags]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyColors&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Blue&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Присвоенные значения: &lt;em&gt;Yellow = 0, Green = 1, Red = 2, Blue = 3&lt;/em&gt;. Они не подходят для использования операций смещения.&lt;/p&gt;

&lt;h3 id=&#34;битовое-представление&#34;&gt;Битовое представление&lt;/h3&gt;

&lt;p&gt;Описанное выше работает благодаря битовому представлению значений флагов при проставление степени двойки:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00000001&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000010&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;00000100&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;00001000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Значение переменной &lt;code&gt;AllowedColors&lt;/code&gt; после присваивания &lt;em&gt;Red, Green&lt;/em&gt; и &lt;em&gt;Blue&lt;/em&gt; c использованием операции ИЛИ (&lt;code&gt;|&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AllowedColors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00001110&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Теперь, для проверки вхождения значения &lt;em&gt;Green&lt;/em&gt; в переменную используем операцию смещения И (&lt;code&gt;&amp;amp;&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AllowedColors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00001110&lt;/span&gt;
             &lt;span class=&#34;n&#34;&gt;MyColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00000010&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;-----------------------&lt;/span&gt;
                            &lt;span class=&#34;m&#34;&gt;00000010&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Это тоже самое, что и MyColor.Green!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;полезные-ссылки&#34;&gt;Полезные ссылки&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What does the [Flags] Enum Attribute mean in csharp? – &lt;a href=&#34;http://stackoverflow.com/questions/8447/what-does-the-flags-enum-attribute-mean-in-c&#34;&gt;Stackoverflow.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Типы перечислений – &lt;a href=&#34;https://msdn.microsoft.com/ru-ru/library/cc138362.aspx&#34;&gt;msdn.microsoft.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FlagsAttribute (класс) – &lt;a href=&#34;https://msdn.microsoft.com/ru-ru/library/system.flagsattribute(v=vs.110).aspx&#34;&gt;msdn.microsoft.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Как тестировать абстрактные классы</title>
      <link>http://beta.agladky.ru/blog/how-to-test-abstract-classes/</link>
      <pubDate>Sat, 05 Sep 2015 13:10:07 +0300</pubDate>
      
      <guid>http://beta.agladky.ru/blog/how-to-test-abstract-classes/</guid>
      <description>

&lt;p&gt;Абстрактные классы сложно тестировать. Рассмотрим ситуации применения абстрактных классов и последующего рефакторинга для проведения юнит тестирования.&lt;/p&gt;

&lt;h3 id=&#34;выделение-реального-интерфейса&#34;&gt;Выделение реального интерфейса&lt;/h3&gt;

&lt;p&gt;Существует специализированный абстрактный класс, но все клиенты используют его конкретные реализации через единый публичный интерфейс:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-Q17gK6ru1Ao/Vh6PH2fppfI/AAAAAAAAAiM/zeQXaGI1myw/s640-Ic42/Situation1_before_my.png&#34; alt=&#34;&#34; title=&#34;Cитуация 1 до&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Классы-потомки реализуют интерфейс определенный абстрактными методами класса. Для повышения тестируемости этот интерфейс выделяется. Абстрактный класс превращается в конкретный и в его конструктор передается объект классов-потомков, реализующих выделенный интерфейс.&lt;/p&gt;

&lt;p&gt;Применяется шаблон проектирования &lt;a href=&#34;https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D1%8F_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)&#34;&gt;стратегия&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-jgWvDdeAlao/Vh6PH2OF0CI/AAAAAAAAAiA/5EoJ4lRRonE/s640-Ic42/Situation1_after_my.png&#34; alt=&#34;&#34; title=&#34;Cитуация 1 после&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Бывший абстрактный класс теперь тестируется используя мок-объект нового интерфейса. Все просто.&lt;/p&gt;

&lt;h3 id=&#34;выделение-хелперов&#34;&gt;Выделение хелперов&lt;/h3&gt;

&lt;p&gt;Абстрактный класс используется для исключения повторений в наследуемых классах. Классы-потомки используются напрямую.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-HxhHgIWdCds/Vh6PINmZ0NI/AAAAAAAAAiI/20-toWjmQHE/s640-Ic42/Situation2_before_my.png&#34; alt=&#34;&#34; title=&#34;Cитуация 2 до&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Абстрактный класс работает как хелпер (helper).&lt;/p&gt;

&lt;p&gt;Чтобы повысить тестируемость, не повторяющийся код переносится в существующие классы. Оставшиеся методы выделяются в хелпер и передаются через интерфейс в конструкторы конкретных классов.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-9oAhCjCnrFc/Vh6PH7B1ffI/AAAAAAAAAiE/q06QyuW6SAc/s640-Ic42/Situation2_after_my.png&#34; alt=&#34;&#34; title=&#34;Cитуация 2 после&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Базовый класс удаляется. Этот способ снова приводит дизайн к конкретным классам, которые просто и легко тестировать.&lt;/p&gt;

&lt;h3 id=&#34;совет&#34;&gt;Совет&lt;/h3&gt;

&lt;p&gt;Предпочитайте сложную сеть простых объектов над простой сетью сложных. Ключ к трестируемому коду — маленькие строительные блоки и слабая связанность.&lt;/p&gt;

&lt;h3 id=&#34;комбинация-ситуаций&#34;&gt;Комбинация ситуаций&lt;/h3&gt;

&lt;p&gt;Встречаются ситуации когда базовый класс содержит как публичный интерфейс, так и защищенные методы-помощники. В этом случае вспомогательные методы отправляются в один класс (ситуация 2), а для наследников реализуется шаблон стратегия (ситуация 1).&lt;/p&gt;

&lt;p&gt;Когда в абстрактном классе часть методов виртуальные, а часть реализованные, еще возможно провести рефакторинг. Например, превратить классы наследники в стратегию. Но, такой случай — хороший индикатор, что ответственности требуют пересмотра.&lt;/p&gt;

&lt;p&gt;Пишите в комментариях примеры когда сложно обойтись без абстрактного класса.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>